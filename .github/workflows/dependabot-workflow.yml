name: Go Test and Validate Dependabot PRs

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.go'
      - '**/go.mod'
      - '**/go.sum'

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.21'

      - name: Determine affected projects
        id: affected-projects
        run: |
          PROJECTS=()
          
          # Check if files were changed in specific project directories
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > changed_files.txt
          
          # Check root directory for changes
          if grep -q "^go\\.mod$\\|^go\\.sum$\\|^\\w.*\\.go$" changed_files.txt; then
            PROJECTS+=(".")
          fi
          
          # Check each project directory for changes
          for dir in */; do
            if [ -f "${dir}go.mod" ] && grep -q "^${dir}go\\.mod$\\|^${dir}go\\.sum$\\|^${dir}.*\\.go$\\|^${dir}config/.*\\.go$" changed_files.txt; then
              PROJECTS+=("${dir}")
            fi
          done
          
          echo "Projects to test: ${PROJECTS[*]}"
          echo "::set-output name=projects::${PROJECTS[*]}"
      
      - name: Run tests for affected projects
        run: |
          IFS=' ' read -r -a PROJECTS <<< "${{ steps.affected-projects.outputs.projects }}"
          for project in "${PROJECTS[@]}"; do
            echo "Testing project: $project"
            cd "$GITHUB_WORKSPACE/$project"
            
            # Skip if no tests are found
            if ! find . -name "*_test.go" -type f | grep -q .; then
              echo "No tests found for $project, skipping."
              continue
            fi
            
            # Run tests including config subdirectory
            go test -v ./... -coverprofile=coverage.out
            
            # Return to workspace root
            cd "$GITHUB_WORKSPACE"
          done

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.21'

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: -no-fail -fmt=json -out=results.json ./...

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.json
          category: gosec
        if: always()

  build-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.21'

      - name: Determine affected projects
        id: affected-projects
        run: |
          PROJECTS=()
          
          # Check if files were changed in specific project directories
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > changed_files.txt
          
          # Check root directory for changes
          if grep -q "^go\\.mod$\\|^go\\.sum$\\|^\\w.*\\.go$" changed_files.txt; then
            PROJECTS+=(".")
          fi
          
          # Check each project directory for changes
          for dir in */; do
            if [ -f "${dir}go.mod" ] && grep -q "^${dir}go\\.mod$\\|^${dir}go\\.sum$\\|^${dir}.*\\.go$\\|^${dir}config/.*\\.go$" changed_files.txt; then
              PROJECTS+=("${dir}")
            fi
          done
          
          echo "Projects to build: ${PROJECTS[*]}"
          echo "::set-output name=projects::${PROJECTS[*]}"

      - name: Build affected projects
        run: |
          IFS=' ' read -r -a PROJECTS <<< "${{ steps.affected-projects.outputs.projects }}"
          for project in "${PROJECTS[@]}"; do
            echo "Building project: $project"
            cd "$GITHUB_WORKSPACE/$project"
            
            # Check if main.go exists before trying to build
            if [ -f "main.go" ]; then
              go build -v .
            else
              echo "No main.go found for $project, skipping build."
            fi
            
            # Return to workspace root
            cd "$GITHUB_WORKSPACE"
          done

  dependabot-auto-approve:
    runs-on: ubuntu-latest
    needs: [test, build-check]
    permissions:
      contents: read
      pull-requests: write
    if: ${{ github.actor == 'dependabot[bot]' && success() }}
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Add label based on dependency type
        run: |
          if [[ ${{ steps.metadata.outputs.update-type }} == 'version-update:semver-patch' ]]; then
            echo "Adding patch update label"
            gh pr edit ${{ github.event.pull_request.number }} --add-label "patch-update"
          elif [[ ${{ steps.metadata.outputs.update-type }} == 'version-update:semver-minor' ]]; then
            echo "Adding minor update label"
            gh pr edit ${{ github.event.pull_request.number }} --add-label "minor-update"
          elif [[ ${{ steps.metadata.outputs.update-type }} == 'version-update:semver-major' ]]; then
            echo "Adding major update label"
            gh pr edit ${{ github.event.pull_request.number }} --add-label "major-update"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
